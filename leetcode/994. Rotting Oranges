from typing import List
from queue import Queue
class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        # figure out the grid size
        n = len(grid)
        m = len(grid[0])

        # store {{row, column}, time}
        q = Queue()
        vis = [[0] * m for _ in range(n)]
        cntFresh = 0
        for i in range(n):
            for j in range(m):
                # if cell contains rotten orange
                if grid[i][j] == 2:
                    q.put(((i, j), 0))
                    # mark as visited (rotten) in visited array
                    vis[i][j] = 2
                # if not rotten
                else:
                    vis[i][j] = 0
                # count fresh oranges
                if grid[i][j] == 1:
                    cntFresh += 1

        tm = 0
        # delta row and delta column
        drow = [-1, 0, +1, 0]
        dcol = [0, 1, 0, -1]
        cnt = 0
        while not q.empty():
            r, c = q.queue[0][0]
            t = q.queue[0][1]
            tm = max(tm, t)
            q.get()
            # exactly 4 neighbours
            for i in range(4):
                # neighbouring row and column
                nrow = r + drow[i]
                ncol = c + dcol[i]
                # check for valid cell and
                # then for unvisited fresh orange
                if 0 <= nrow < n and 0 <= ncol < m and vis[nrow][ncol] == 0 and grid[nrow][ncol] == 1:
                    # push in queue with timer increased
                    q.put(((nrow, ncol), t + 1))
                    # mark as rotten
                    vis[nrow][ncol] = 2
                    cnt += 1

        # if all oranges are not rotten
        if cnt != cntFresh:
            return -1

        return tm
