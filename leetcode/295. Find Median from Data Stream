import heapq as hq
class MedianFinder:

    def __init__(self):
        self.small,self.large=[],[]
    def addNum(self, num: int) -> None:
        hq.heappush(self.small,-1*num)
        if self.small and self.large and (-1*self.small[0])> self.large[0]:
            val= (-1*hq.heappop(self.small))
            hq.heappush(self.large,val)
        if len(self.small)>len(self.large)+1:
            val= (-1*hq.heappop(self.small))
            hq.heappush(self.large,val)
        if len(self.large)>len(self.small)+1:
            val= (hq.heappop(self.large))
            hq.heappush(self.small,-1*val)
    def findMedian(self) -> float:
        if len(self.small)>len(self.large):
            return -1*self.small[0]

        if len(self.large)>len(self.small):
            return self.large[0]
        return ((-1*self.small[0])+self.large[0])/2
            
