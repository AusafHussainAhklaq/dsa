#User function Template for python3
'''
	Your task is to segregate the list of 
	0s,1s and 2s.
	
	Function Arguments: head of the original list.
	Return Type: head of the new list formed.

	{
		# Node Class
		class Node:
		    def __init__(self, data):   # data -> value stored in node
		        self.data = data
		        self.next = None
	}

'''
class Solution:
    #Function to sort a linked list of 0s, 1s and 2s.
    def segregate(self, head):
        count0=0

        count1=0

        count2=0

        self.curr=head

        while self.curr:

            if self.curr.data==0:

                count0+=1

            elif self.curr.data==1:

                count1+=1

            elif self.curr.data==2:

                count2+=1

            self.curr=self.curr.next

        self.curr=head

        while self.curr:

            if count0!=0:

                self.curr.data=0

                count0-=1

            elif count1!=0:

                self.curr.data=1

                count1-=1

            else:

                self.curr.data=2

                count2-=1

            self.curr=self.curr.next

        return head
 # mycode
'''
        a=head
        temp0_start=None
        temp0_end=None
        temp1_start=None
        temp1_end=None
        temp2_start=None
        temp2_end=None
        while a is not None:
            if a.data==0:
                if temp0_start is None:
                    temp0_start=a
                    temp0_end=a
                else:
                    temp0_end.next=a
                    temp0_end=temp0_end.next
            elif a.data==1:
                if temp1_start is None:
                    temp1_start=a
                    temp1_end=a
                else:
                    temp1_end.next=a
                    temp1_end=temp1_end.next
            elif a. data==2:
                if temp2_start is None:
                    temp2_start=a
                    temp2_end=a
                else:
                    temp2_end.next=a
                    temp2_end=temp2_end.next
            a=a.next
        if temp0_start is None and temp1_start is None and temp2_start is None:
            return None
        elif temp0_start is None and temp1_start is None and temp2_start is not None:
            return temp2_start
        elif temp0_start is None and temp1_start is not None and temp2_start is None:
            return temp1_start
        elif temp0_start is not None and temp1_start is None and temp2_start is None:
            return temp0_start
        elif temp0_start is None and temp1_start is not None and temp2_start is not None:
            temp1_end.next=temp2_start
            return temp1_start
        elif temp0_start is not None and temp1_start is None and temp2_start is not None:
            temp0_end.next=temp2_start
            return temp0_start
        elif temp0_start is not None and temp1_start is not None and temp2_start is None:
            temp0_end.next=temp1_start
            return temp0_start
        elif temp0_start is not None and temp1_start is not None and temp2_start is not None:
            temp0_end.next=temp1_start
            temp1_end.next=temp2_start
            return temp0_start
 '''       
            
    


#{ 
 # Driver Code Starts
#Initial Template for Python 3
#Contributed by : Nagendra Jha

import atexit
import io
import sys

_INPUT_LINES = sys.stdin.read().splitlines()
input = iter(_INPUT_LINES).__next__
_OUTPUT_BUFFER = io.StringIO()
sys.stdout = _OUTPUT_BUFFER

@atexit.register

def write():
    sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())
# Node Class
class Node:
    def __init__(self, data):   # data -> value stored in node
        self.data = data
        self.next = None

# Linked List Class
class LinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    # creates a new node with given value and appends it at the end of the linked list
    def append(self, new_value):
        new_node = Node(new_value)
        if self.head is None:
            self.head = new_node
            self.tail = new_node
            return
        self.tail.next = new_node
        self.tail = new_node
        
# prints the elements of linked list starting with head
def printList(head):
    if head is None:
        print(' ')
        return
    curr_node = head
    while curr_node:
        print(curr_node.data,end=" ")
        curr_node=curr_node.next
    print()

if __name__ == '__main__':
    t=int(input())
    for cases in range(t):
        n = int(input())
        a = LinkedList() # create a new linked list 'a'.
        nodes_a = list(map(int, input().strip().split()))
        for x in nodes_a:
            a.append(x)  # add to the end of the list
        printList(Solution().segregate(a.head))
# } Driver Code Ends
