#User function Template for python3

class Solution:
    def binary(self,i,n,m,ans,ds,open,close):
        if i>=m:
            if open==close and ds[0]=="(" and ds[-1]==")":
                ans.append(ds)
            return
        if open<n:
            temp=ds
            ds+="("
            self.binary(i+1,n,m, ans,ds,open+1,close)
            ds=temp
        if close<n and close<open:
            temp=ds
            ds+=")"
            self.binary(i+1,n,m,ans,ds,open,close+1)
            ds=temp
    def AllParenthesis(self,n):
        ds=""
        ans=[]
        m=n*2
        open=0
        close=0
        self.binary(0,n,m,ans,ds,open,close)
        return ans



#{ 
 # Driver Code Starts
#Initial Template for Python 3


        
if __name__=="__main__":
    t=int(input())
    for i in range(0,t):
        n=int(input())
        ob=Solution()
        result=ob.AllParenthesis(n)
        result.sort()
        for i in range(0,len(result)):
            print(result[i])
        

# } Driver Code Ends
