#User function Template for python3


class Solution:
    
    #Function to convert an infix expression to a postfix expression.
    def __init__(self):
        self.stack=[]
        self.st=""
    def check(self,s):
        dt={
            ")":0,
            "+":1,
            "-":1,
            "*":2,
            "/":2,
            "^":3,
        }
        return dt.get(s)
        
    def InfixtoPostfix(self,exp1):
        exp=exp1[::-1]
        print(exp)
        #code here
        for symbol in exp:
            if symbol==")":
                self.stack.append(symbol)
            
            elif symbol=="(":
                next="("
                while next != ")":
                    if next != "(":
                        self.st+=next
                    next=self.stack.pop()
                        
            elif symbol=="+" or symbol=="-" or symbol=="*" or symbol=="/" or symbol=="^":
                while len(self.stack)>0 and self.check(self.stack[-1])>self.check(symbol):
                    self.st+=self.stack.pop()
                self.stack.append(symbol)
            else:
                self.st+=symbol
        while len(self.stack)>0:
            self.st+=self.stack.pop()
        return self.st[::-1]
                
            


#{ 
 # Driver Code Starts
#Initial Template for Python 3

import atexit
import io
import sys


if __name__ == '__main__':
    test_cases = 1
    for cases in range(test_cases) :
        exp = "k+l-m*n+(o^p)*w/u/v*t+q"
        ob=Solution()
        print(ob.InfixtoPostfix(exp))
# } Driver Code Ends
