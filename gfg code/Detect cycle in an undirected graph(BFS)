from typing import List
class Solution:
    def detectcycle(self,start, V, adj, vis):
        vis[start]=1
        queue=[]
        queue.append([start,-1])
        while len(queue)>0:
            node=queue[0][0]
            parent=queue[0][1]
            queue.pop(0)
            for i in adj[node]:
                if not(vis[i]):
                    vis[i]=1
                    queue.append([i,node])
                elif parent!=i:
                    return True
        return False
    #Function to detect cycle in an undirected graph.
	def isCycle(self, V: int, adj: List[List[int]]) -> bool:
	    vis=[0]*V
	    for i in range(V):
	        if vis[i]==0:
	            if self.detectcycle(i,V,adj,vis):
	                return True
	    return False
	           
	    
		


#{ 
 # Driver Code Starts
if __name__ == '__main__':

	T=int(input())
	for i in range(T):
		V, E = map(int, input().split())
		adj = [[] for i in range(V)]
		for _ in range(E):
			u, v = map(int, input().split())
			adj[u].append(v)
			adj[v].append(u)
		obj = Solution()
		ans = obj.isCycle(V, adj)
		if(ans):
			print("1")
		else:
			print("0")

# } Driver Code Ends
