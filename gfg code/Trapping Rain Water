
class Solution:
    def trappingWater(self, arr,n):
        #Code here
        #prefix creation
        prefix=[]
        for i in range(len(arr)):
            if len(prefix)==0:
                prefix.append(arr[i])
            else:
                if prefix[-1]>arr[i]:
                    prefix.append(prefix[-1])
                else:
                    prefix.append(arr[i])
        
        #sufix creation
        arr1=arr[::-1]
        sufix=[]
        for i in range(len(arr)):
            if len(sufix)==0:
                sufix.append(arr1[i])
            else:
                if sufix[-1]>arr1[i]:
                    sufix.append(sufix[-1])
                else:
                    sufix.append(arr1[i])
        sufix=sufix[::-1]
        
        
        total=0
        for i in range(1,n-1):
            m=min(prefix[i],sufix[i])-arr[i]
            if m>0:
                total+=m
        return(total)

#{ 
 # Driver Code Starts
#Initial Template for Python 3

import math



def main():
        T=int(input())
        while(T>0):
            
            n=int(input())
            
            arr=[int(x) for x in input().strip().split()]
            obj = Solution()
            print(obj.trappingWater(arr,n))
            
            
            T-=1


if __name__ == "__main__":
    main()



# } Driver Code Ends
