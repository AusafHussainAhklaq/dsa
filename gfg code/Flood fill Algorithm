class Solution:
    def dfs(self, row, col, ans, image, newColor, delRow, delCol, iniColor):
        ans[row][col] = newColor
        n = len(image)
        m = len(image[0])
        for i in range(4):
            nrow = row + delRow[i]
            ncol = col + delCol[i]
            if (0 <= nrow < n and 0 <= ncol < m and
                image[nrow][ncol] == iniColor and ans[nrow][ncol] != newColor):
                self.dfs(nrow, ncol, ans, image, newColor, delRow, delCol, iniColor)
	def floodFill(self, image, sr, sc, newColor):
		#Code here
		iniColor = image[sr][sc]
        ans = [row[:] for row in image]
        delRow = [-1, 0, +1, 0]
        delCol = [0, +1, 0, -1]
        self.dfs(sr, sc, ans, image, newColor, delRow, delCol, iniColor)
        return ans



#{ 
 # Driver Code Starts
import sys
sys.setrecursionlimit(10**7)
if __name__ == '__main__':

	T=int(input())
	for i in range(T):
		n, m = input().split()
		n = int(n)
		m = int(m)
		image = []
		for _ in range(n):
			image.append(list(map(int, input().split())))
		sr, sc, newColor = input().split()
		sr = int(sr); sc = int(sc); newColor = int(newColor);
		obj = Solution()
		ans = obj.floodFill(image, sr, sc, newColor)
		for _ in ans:
			for __ in _:
				print(__, end = " ")
			print()
# } Driver Code Ends
