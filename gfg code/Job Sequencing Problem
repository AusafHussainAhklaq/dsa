#User function Template for python3
from operator import itemgetter
class Solution:
    
    #Function to find the maximum profit and the number of jobs done.
    def JobScheduling(self,Jobs,n):
        Jobs.sort(key = lambda x: x.profit, reverse=True)

        

        arr = [0] * n

        job_count = 0

        max_profit = 0

        for job in Jobs:

            index = min(job.deadline - 1, n)

            for j in range(index, -1, -1):

                if arr[j] == 0:

                    max_profit += job.profit

                    arr[j] = 1

                    job_count += 1

                    break

        

        return job_count, max_profit
        '''
        jobs=[]
        for i in Jobs:
            jobs.append([i.id,i.deadline,i.profit])
        res=sorted(jobs,key=itemgetter(2),reverse=True)
        arr=[0]*n
        total=0
        count=0
        for i in range(len(res)):
            index=res[i][1]-1
            while index>-1:
                if arr[index]==0:
                    arr[index]=res[i][2]
                    total+=res[i][2]
                    count+=1
                    break
                index-=1
        final=[count,total]
        return final
        '''

#{ 
 # Driver Code Starts
#Initial Template for Python 3
import atexit
import io
import sys

#Contributed by : Nagendra Jha
class Job:
    '''
    Job class which stores profit and deadline.
    '''
    def __init__(self,profit=0,deadline=0):
        self.profit = profit
        self.deadline = deadline
        self.id = 0

if __name__ == '__main__':
    test_cases = int(input())
    for cases in range(test_cases) :
        n = int(input())
        info = list(map(int,input().strip().split()))
        Jobs = [Job() for i in range(n)]
        for i in range(n):
            Jobs[i].id = info[3*i]
            Jobs[i].deadline = info[3 * i + 1]
            Jobs[i].profit=info[3*i+2]
        ob = Solution()
        res = ob.JobScheduling(Jobs,n)
        print (res[0], end=" ")
        print (res[1])
# } Driver Code Ends
